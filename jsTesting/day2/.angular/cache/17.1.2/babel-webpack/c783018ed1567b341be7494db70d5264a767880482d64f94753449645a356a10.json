{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { of } from \"rxjs\";\nimport { HeroesComponent } from \"./heroes.component\";\nimport { HeroService } from \"../services/hero service/hero.service\";\nimport { TestBed } from \"@angular/core/testing\";\nimport { Component, Input } from \"@angular/core\";\nimport { By } from \"@angular/platform-browser\";\nlet HeroComponentMock = class HeroComponentMock {\n  static #_ = this.propDecorators = {\n    hero: [{\n      type: Input\n    }]\n  };\n};\nHeroComponentMock = __decorate([Component({\n  standalone: true,\n  template: \"<div></div>\",\n  selector: 'app-hero'\n})], HeroComponentMock);\ndescribe(\"heroes component (integration)\", () => {\n  let component, heroServiceMock, heroesMock;\n  let fixture;\n  beforeEach(() => {\n    heroesMock = [{\n      id: 100,\n      name: \"superman\",\n      strength: 10\n    }, {\n      id: 101,\n      name: \"batman\",\n      strength: 15\n    }];\n    heroServiceMock = jasmine.createSpyObj([\"getHeroes\", \"addHero\", \"deleteHero\"]);\n    heroServiceMock.getHeroes.and.returnValue(of(heroesMock));\n    TestBed.configureTestingModule({\n      imports: [HeroesComponent]\n    }).overrideComponent(HeroesComponent, {\n      set: {\n        imports: [HeroComponentMock],\n        providers: [{\n          provide: HeroService,\n          useValue: heroServiceMock\n        }]\n      }\n    });\n    fixture = TestBed.createComponent(HeroesComponent);\n    component = fixture.componentInstance;\n  });\n  it('expect heroes[] to be empty', () => {\n    expect(component.heroes).toHaveSize(0);\n  });\n  it(\"expect after ngOninit() to set heroes[] and getHeroes from service to have been called then detect that in template\", () => {\n    component.ngOnInit();\n    expect(heroServiceMock.getHeroes).toHaveBeenCalled();\n    expect(component.heroes).toHaveSize(2);\n    fixture.detectChanges();\n    //access template\n    let liTags = fixture.debugElement.queryAll(By.css(\"li\"));\n    expect(liTags).toHaveSize(2);\n  });\n  it(\"expect after ngOninit() to send hero to children correctly\", () => {\n    component.ngOnInit();\n    fixture.detectChanges();\n    //access children\n    let children = fixture.debugElement.queryAll(By.directive(HeroComponentMock));\n    expect(children).toHaveSize(2);\n    expect(children[0].componentInstance.hero.name).toBe(\"superman\");\n  });\n});","map":{"version":3,"names":["of","HeroesComponent","HeroService","TestBed","Component","Input","By","HeroComponentMock","_","__decorate","standalone","template","selector","describe","component","heroServiceMock","heroesMock","fixture","beforeEach","id","name","strength","jasmine","createSpyObj","getHeroes","and","returnValue","configureTestingModule","imports","overrideComponent","set","providers","provide","useValue","createComponent","componentInstance","it","expect","heroes","toHaveSize","ngOnInit","toHaveBeenCalled","detectChanges","liTags","debugElement","queryAll","css","children","directive","hero","toBe"],"sources":["/home/master-x/ITI-workspace/jsTesting/day2/src/app/heroes/heroescomponent.integration.spec.ts"],"sourcesContent":["import { of } from \"rxjs\";\r\nimport { HeroesComponent } from \"./heroes.component\";\r\nimport { Hero } from \"../hero\";\r\nimport { HeroService } from \"../services/hero service/hero.service\";\r\nimport { ComponentFixture, TestBed } from \"@angular/core/testing\";\r\nimport { Component, Input } from \"@angular/core\";\r\nimport { By } from \"@angular/platform-browser\";\r\n\r\n@Component({standalone:true,template:\"<div></div>\",selector:'app-hero'})\r\nclass HeroComponentMock{\r\n    @Input() hero!: Hero;\r\n}\r\n\r\ndescribe(\"heroes component (integration)\", () => {\r\n    let component: HeroesComponent, heroServiceMock: jasmine.SpyObj<HeroService>, heroesMock: Hero[]\r\n    let fixture: ComponentFixture<HeroesComponent>\r\n    beforeEach(() => {\r\n        heroesMock = [\r\n            { id: 100, name: \"superman\", strength: 10 },\r\n            { id: 101, name: \"batman\", strength: 15 },\r\n        ]\r\n        heroServiceMock = jasmine.createSpyObj([\"getHeroes\", \"addHero\", \"deleteHero\"])\r\n        heroServiceMock.getHeroes.and.returnValue(of(heroesMock))\r\n\r\n        TestBed.configureTestingModule({\r\n            imports: [HeroesComponent]\r\n        }).overrideComponent(HeroesComponent,{\r\n            set:{\r\n                imports:[HeroComponentMock],\r\n                providers:[{provide:HeroService,useValue:heroServiceMock}]\r\n            }\r\n        })\r\n\r\n        fixture = TestBed.createComponent(HeroesComponent)\r\n        component = fixture.componentInstance\r\n\r\n    })\r\n    it('expect heroes[] to be empty', () => {\r\n        expect(component.heroes).toHaveSize(0)\r\n    });\r\n    it(\"expect after ngOninit() to set heroes[] and getHeroes from service to have been called then detect that in template\", () => {\r\n        component.ngOnInit()\r\n        expect(heroServiceMock.getHeroes).toHaveBeenCalled()\r\n        expect(component.heroes).toHaveSize(2)\r\n        fixture.detectChanges()\r\n        //access template\r\n        let liTags= fixture.debugElement.queryAll(By.css(\"li\"))\r\n        expect(liTags).toHaveSize(2)\r\n\r\n\r\n    })\r\n    it(\"expect after ngOninit() to send hero to children correctly\",()=>{\r\n        component.ngOnInit()\r\n        fixture.detectChanges()\r\n\r\n        //access children\r\n        let children= fixture.debugElement.queryAll(By.directive(HeroComponentMock))\r\n        expect(children).toHaveSize(2)\r\n        expect(children[0].componentInstance.hero.name).toBe(\"superman\")\r\n    })\r\n})"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}