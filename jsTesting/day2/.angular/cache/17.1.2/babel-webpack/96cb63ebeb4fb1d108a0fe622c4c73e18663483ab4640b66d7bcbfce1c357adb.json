{"ast":null,"code":"import { HttpClientTestingModule, HttpTestingController } from \"@angular/common/http/testing\";\nimport { HeroServiceForLab } from \"./hero.lab.service\";\nimport { TestBed } from \"@angular/core/testing\";\ndescribe(\"3-hero service (http) integration testing:\", () => {\n  let httpTesting;\n  let heroService;\n  // beforeEach(async () => {\n  TestBed.configureTestingModule({\n    imports: [HttpClientTestingModule],\n    providers: [\n    // ... other test providers\n    HeroServiceForLab]\n  });\n  httpTesting = TestBed.inject(HttpTestingController);\n  heroService = TestBed.inject(HeroServiceForLab);\n});\nit(\"getHeroes function: send request and receive response successfully\", () => {\n  heroService.getHeroes().subscribe(data => {\n    expect(data[0].id).toBe(1);\n  });\n  const req = httpTesting.expectOne(\"http://localhost:3000/heroes\");\n  expect(req.request.method).toBe(\"GET\");\n  req.flush([{\n    id: 1,\n    name: \"man\",\n    strength: 12\n  }]);\n});\nit(\"updateHero function: send request and receive response successfully\", () => {\n  heroService.updateHero({\n    id: 1,\n    name: \"Spider man\",\n    strength: 10\n  }).subscribe(data => {\n    expect(data.name).toBe(\"Spider man\");\n  });\n  const req = httpTesting.expectOne(\"http://localhost:3000/heroes\");\n  expect(req.request.method).toBe(\"PUT\");\n  // req.flush({ id: 1, name: \"Spider man\", strength: 10 });\n});","map":{"version":3,"names":["HttpClientTestingModule","HttpTestingController","HeroServiceForLab","TestBed","describe","httpTesting","heroService","configureTestingModule","imports","providers","inject","it","getHeroes","subscribe","data","expect","id","toBe","req","expectOne","request","method","flush","name","strength","updateHero"],"sources":["/home/master-x/ITI-workspace/jsTesting/day2/src/app/lab/hero service/hero.lab.service.integration.spec.ts"],"sourcesContent":["import { HttpClientTestingModule, HttpTestingController } from \"@angular/common/http/testing\";\r\nimport { HeroServiceForLab } from \"./hero.lab.service\";\r\nimport { TestBed } from \"@angular/core/testing\";\r\n\r\ndescribe(\"3-hero service (http) integration testing:\", () => {\r\n  let httpTesting: HttpTestingController;\r\n  let heroService: HeroServiceForLab;\r\n  // beforeEach(async () => {\r\n    TestBed.configureTestingModule({\r\n      imports: [HttpClientTestingModule],\r\n      providers: [\r\n        // ... other test providers\r\n        HeroServiceForLab\r\n\r\n      ],\r\n    });\r\n    httpTesting = TestBed.inject(HttpTestingController);\r\n    heroService = TestBed.inject(HeroServiceForLab);\r\n  });\r\n\r\n\r\n  it(\"getHeroes function: send request and receive response successfully\", () => {\r\n    heroService.getHeroes().subscribe(data => {\r\n      expect(data[0].id).toBe(1);\r\n    });\r\n    const req = httpTesting.expectOne(\"http://localhost:3000/heroes\");\r\n    expect(req.request.method).toBe(\"GET\");\r\n    req.flush([{ id: 1, name: \"man\", strength: 12 }]);\r\n  });\r\n  it(\"updateHero function: send request and receive response successfully\", () => {\r\n    heroService.updateHero({ id: 1, name: \"Spider man\", strength: 10 }).subscribe((data)=>{\r\n      expect(data.name).toBe(\"Spider man\")\r\n    });\r\n    const req = httpTesting.expectOne(\"http://localhost:3000/heroes\");\r\n    expect(req.request.method).toBe(\"PUT\");\r\n    // req.flush({ id: 1, name: \"Spider man\", strength: 10 });\r\n  })\r\n})"],"mappings":"AAAA,SAASA,uBAAuB,EAAEC,qBAAqB,QAAQ,8BAA8B;AAC7F,SAASC,iBAAiB,QAAQ,oBAAoB;AACtD,SAASC,OAAO,QAAQ,uBAAuB;AAE/CC,QAAQ,CAAC,4CAA4C,EAAE,MAAK;EAC1D,IAAIC,WAAkC;EACtC,IAAIC,WAA8B;EAClC;EACEH,OAAO,CAACI,sBAAsB,CAAC;IAC7BC,OAAO,EAAE,CAACR,uBAAuB,CAAC;IAClCS,SAAS,EAAE;IACT;IACAP,iBAAiB;GAGpB,CAAC;EACFG,WAAW,GAAGF,OAAO,CAACO,MAAM,CAACT,qBAAqB,CAAC;EACnDK,WAAW,GAAGH,OAAO,CAACO,MAAM,CAACR,iBAAiB,CAAC;AACjD,CAAC,CAAC;AAGFS,EAAE,CAAC,oEAAoE,EAAE,MAAK;EAC5EL,WAAW,CAACM,SAAS,EAAE,CAACC,SAAS,CAACC,IAAI,IAAG;IACvCC,MAAM,CAACD,IAAI,CAAC,CAAC,CAAC,CAACE,EAAE,CAAC,CAACC,IAAI,CAAC,CAAC,CAAC;EAC5B,CAAC,CAAC;EACF,MAAMC,GAAG,GAAGb,WAAW,CAACc,SAAS,CAAC,8BAA8B,CAAC;EACjEJ,MAAM,CAACG,GAAG,CAACE,OAAO,CAACC,MAAM,CAAC,CAACJ,IAAI,CAAC,KAAK,CAAC;EACtCC,GAAG,CAACI,KAAK,CAAC,CAAC;IAAEN,EAAE,EAAE,CAAC;IAAEO,IAAI,EAAE,KAAK;IAAEC,QAAQ,EAAE;EAAE,CAAE,CAAC,CAAC;AACnD,CAAC,CAAC;AACFb,EAAE,CAAC,qEAAqE,EAAE,MAAK;EAC7EL,WAAW,CAACmB,UAAU,CAAC;IAAET,EAAE,EAAE,CAAC;IAAEO,IAAI,EAAE,YAAY;IAAEC,QAAQ,EAAE;EAAE,CAAE,CAAC,CAACX,SAAS,CAAEC,IAAI,IAAG;IACpFC,MAAM,CAACD,IAAI,CAACS,IAAI,CAAC,CAACN,IAAI,CAAC,YAAY,CAAC;EACtC,CAAC,CAAC;EACF,MAAMC,GAAG,GAAGb,WAAW,CAACc,SAAS,CAAC,8BAA8B,CAAC;EACjEJ,MAAM,CAACG,GAAG,CAACE,OAAO,CAACC,MAAM,CAAC,CAACJ,IAAI,CAAC,KAAK,CAAC;EACtC;AACF,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}