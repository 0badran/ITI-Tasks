{"ast":null,"code":"import { TestBed } from \"@angular/core/testing\";\nimport { HttpTestingController, HttpClientTestingModule, provideHttpClientTesting } from \"@angular/common/http/testing\";\nimport { MessageService } from \"../message/message.service\";\nimport { HeroService } from \"./hero.service\";\ndescribe(\"hero service:\", () => {\n  let messageServiceMock, service, httpTesting;\n  let heroesUrl = 'http://localhost:3000/heroes';\n  beforeEach(() => {\n    messageServiceMock = jasmine.createSpyObj([\"add\"]);\n    TestBed.configureTestingModule({\n      //1\n      imports: [HttpClientTestingModule],\n      providers: [\n      // ... other test providers\n      provideHttpClientTesting(), {\n        provide: MessageService,\n        useValue: messageServiceMock\n      }]\n    });\n    //2\n    httpTesting = TestBed.inject(HttpTestingController);\n    //3\n    service = TestBed.inject(HeroService);\n  });\n  it('getHero function', () => {\n    service.getHero(1).subscribe({\n      next: data => {\n        expect(data.name).toContain(\"spider\");\n      }\n    });\n    let reqTest = httpTesting.expectOne(heroesUrl + \"/1\");\n    expect(reqTest.request.method).toBe(\"GET\");\n    reqTest.flush({\n      id: 1,\n      name: \"spider man\",\n      strength: 10\n    });\n  });\n  it(\"addHero\", () => {\n    service.addHero({\n      id: 200,\n      name: \"Abo obida\",\n      strength: 1000\n    }).subscribe({\n      next: data => {\n        expect(data.strength).toBe(1000);\n      }\n    });\n    let req = httpTesting.expectOne(heroesUrl);\n    expect(req.request.method).toBe(\"POST\");\n    req.flush({\n      id: 200,\n      name: \"Abo obida\",\n      strength: 1000\n    });\n  });\n});","map":{"version":3,"names":["TestBed","HttpTestingController","HttpClientTestingModule","provideHttpClientTesting","MessageService","HeroService","describe","messageServiceMock","service","httpTesting","heroesUrl","beforeEach","jasmine","createSpyObj","configureTestingModule","imports","providers","provide","useValue","inject","it","getHero","subscribe","next","data","expect","name","toContain","reqTest","expectOne","request","method","toBe","flush","id","strength","addHero","req"],"sources":["/home/master-x/ITI-workspace/jsTesting/day2/src/app/services/hero service/hero.service.spec.ts"],"sourcesContent":["import { TestBed } from \"@angular/core/testing\";\r\nimport { HttpTestingController, HttpClientTestingModule, provideHttpClientTesting } from \"@angular/common/http/testing\"\r\nimport { MessageService } from \"../message/message.service\";\r\nimport { HeroService } from \"./hero.service\";\r\n\r\ndescribe(\"hero service:\", () => {\r\n  let messageServiceMock, service: HeroService, httpTesting: HttpTestingController\r\n  let heroesUrl = 'http://localhost:3000/heroes'\r\n  beforeEach(() => {\r\n    messageServiceMock = jasmine.createSpyObj([\"add\"])\r\n\r\n    TestBed.configureTestingModule({\r\n      //1\r\n      imports: [HttpClientTestingModule],\r\n      providers: [\r\n        // ... other test providers\r\n        provideHttpClientTesting(),\r\n        { provide: MessageService, useValue: messageServiceMock }\r\n      ],\r\n    });\r\n    //2\r\n    httpTesting = TestBed.inject(HttpTestingController);\r\n    //3\r\n    service = TestBed.inject(HeroService);\r\n  })\r\n  it('getHero function', () => {\r\n    service.getHero(1).subscribe({next:(data)=>{\r\n      expect(data.name).toContain(\"spider\")\r\n    }})\r\n\r\n    let reqTest = httpTesting.expectOne(heroesUrl + \"/1\")\r\n    expect(reqTest.request.method).toBe(\"GET\")\r\n\r\n\r\n    reqTest.flush({id:1,name :\"spider man\",strength:10})\r\n  });\r\n  it(\"addHero\",()=>{\r\n    service.addHero({id:200,name:\"Abo obida\",strength:1000}).subscribe({next:data=>{\r\n      expect(data.strength).toBe(1000)\r\n    }})\r\n\r\n   let req= httpTesting.expectOne(heroesUrl)\r\n    expect(req.request.method).toBe(\"POST\")\r\n\r\n    req.flush({id:200,name:\"Abo obida\",strength:1000})\r\n  })\r\n})\r\n\r\n\r\n"],"mappings":"AAAA,SAASA,OAAO,QAAQ,uBAAuB;AAC/C,SAASC,qBAAqB,EAAEC,uBAAuB,EAAEC,wBAAwB,QAAQ,8BAA8B;AACvH,SAASC,cAAc,QAAQ,4BAA4B;AAC3D,SAASC,WAAW,QAAQ,gBAAgB;AAE5CC,QAAQ,CAAC,eAAe,EAAE,MAAK;EAC7B,IAAIC,kBAAkB,EAAEC,OAAoB,EAAEC,WAAkC;EAChF,IAAIC,SAAS,GAAG,8BAA8B;EAC9CC,UAAU,CAAC,MAAK;IACdJ,kBAAkB,GAAGK,OAAO,CAACC,YAAY,CAAC,CAAC,KAAK,CAAC,CAAC;IAElDb,OAAO,CAACc,sBAAsB,CAAC;MAC7B;MACAC,OAAO,EAAE,CAACb,uBAAuB,CAAC;MAClCc,SAAS,EAAE;MACT;MACAb,wBAAwB,EAAE,EAC1B;QAAEc,OAAO,EAAEb,cAAc;QAAEc,QAAQ,EAAEX;MAAkB,CAAE;KAE5D,CAAC;IACF;IACAE,WAAW,GAAGT,OAAO,CAACmB,MAAM,CAAClB,qBAAqB,CAAC;IACnD;IACAO,OAAO,GAAGR,OAAO,CAACmB,MAAM,CAACd,WAAW,CAAC;EACvC,CAAC,CAAC;EACFe,EAAE,CAAC,kBAAkB,EAAE,MAAK;IAC1BZ,OAAO,CAACa,OAAO,CAAC,CAAC,CAAC,CAACC,SAAS,CAAC;MAACC,IAAI,EAAEC,IAAI,IAAG;QACzCC,MAAM,CAACD,IAAI,CAACE,IAAI,CAAC,CAACC,SAAS,CAAC,QAAQ,CAAC;MACvC;IAAC,CAAC,CAAC;IAEH,IAAIC,OAAO,GAAGnB,WAAW,CAACoB,SAAS,CAACnB,SAAS,GAAG,IAAI,CAAC;IACrDe,MAAM,CAACG,OAAO,CAACE,OAAO,CAACC,MAAM,CAAC,CAACC,IAAI,CAAC,KAAK,CAAC;IAG1CJ,OAAO,CAACK,KAAK,CAAC;MAACC,EAAE,EAAC,CAAC;MAACR,IAAI,EAAE,YAAY;MAACS,QAAQ,EAAC;IAAE,CAAC,CAAC;EACtD,CAAC,CAAC;EACFf,EAAE,CAAC,SAAS,EAAC,MAAI;IACfZ,OAAO,CAAC4B,OAAO,CAAC;MAACF,EAAE,EAAC,GAAG;MAACR,IAAI,EAAC,WAAW;MAACS,QAAQ,EAAC;IAAI,CAAC,CAAC,CAACb,SAAS,CAAC;MAACC,IAAI,EAACC,IAAI,IAAE;QAC7EC,MAAM,CAACD,IAAI,CAACW,QAAQ,CAAC,CAACH,IAAI,CAAC,IAAI,CAAC;MAClC;IAAC,CAAC,CAAC;IAEJ,IAAIK,GAAG,GAAE5B,WAAW,CAACoB,SAAS,CAACnB,SAAS,CAAC;IACxCe,MAAM,CAACY,GAAG,CAACP,OAAO,CAACC,MAAM,CAAC,CAACC,IAAI,CAAC,MAAM,CAAC;IAEvCK,GAAG,CAACJ,KAAK,CAAC;MAACC,EAAE,EAAC,GAAG;MAACR,IAAI,EAAC,WAAW;MAACS,QAAQ,EAAC;IAAI,CAAC,CAAC;EACpD,CAAC,CAAC;AACJ,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}