{"ast":null,"code":"import { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';\nimport { TestBed } from '@angular/core/testing';\nimport { HeroServiceForLab } from './hero.lab.service';\ndescribe('HeroServiceForLab', () => {\n  let service;\n  let httpMock;\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      imports: [HttpClientTestingModule],\n      providers: [HeroServiceForLab]\n    });\n    service = TestBed.inject(HeroServiceForLab);\n    httpMock = TestBed.inject(HttpTestingController);\n  });\n  afterEach(() => {\n    httpMock.verify();\n  });\n  it('should be created', () => {\n    expect(service).toBeTruthy();\n  });\n  it('should retrieve heroes from the API via GET', () => {\n    const dummyHeroes = [{\n      id: 1,\n      name: 'Hero 1'\n    }, {\n      id: 2,\n      name: 'Hero 2'\n    }];\n    service.getHeroes().subscribe(heroes => {\n      expect(heroes.length).toBe(2);\n      expect(heroes).toEqual(dummyHeroes);\n    });\n    const req = httpMock.expectOne('http://localhost:3000/heroes');\n    expect(req.request.method).toBe('GET');\n    req.flush(dummyHeroes);\n  });\n  it('should update hero via PUT', () => {\n    const updatedHero = {\n      id: 1,\n      name: 'Updated Hero'\n    };\n    service.updateHero(updatedHero).subscribe(response => {\n      expect(response).toBeTruthy();\n    });\n    const req = httpMock.expectOne('http://localhost:3000/heroes');\n    expect(req.request.method).toBe('PUT');\n    req.flush(updatedHero);\n  });\n});","map":{"version":3,"names":["HttpClientTestingModule","HttpTestingController","TestBed","HeroServiceForLab","describe","service","httpMock","beforeEach","configureTestingModule","imports","providers","inject","afterEach","verify","it","expect","toBeTruthy","dummyHeroes","id","name","getHeroes","subscribe","heroes","length","toBe","toEqual","req","expectOne","request","method","flush","updatedHero","updateHero","response"],"sources":["/home/master-x/ITI-workspace/jsTesting/day2/src/app/lab/hero service/hero.lab.service.integration.spec.ts"],"sourcesContent":["import { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';\r\nimport { TestBed } from '@angular/core/testing';\r\nimport { HeroServiceForLab } from './hero.lab.service';\r\n\r\ndescribe('HeroServiceForLab', () => {\r\n  let service: HeroServiceForLab;\r\n  let httpMock: HttpTestingController;\r\n\r\n  beforeEach(() => {\r\n    TestBed.configureTestingModule({\r\n      imports: [HttpClientTestingModule],\r\n      providers: [HeroServiceForLab]\r\n    });\r\n    service = TestBed.inject(HeroServiceForLab);\r\n    httpMock = TestBed.inject(HttpTestingController);\r\n  });\r\n\r\n  afterEach(() => {\r\n    httpMock.verify();\r\n  });\r\n\r\n  it('should be created', () => {\r\n    expect(service).toBeTruthy();\r\n  });\r\n\r\n  it('should retrieve heroes from the API via GET', () => {\r\n    const dummyHeroes = [{ id: 1, name: 'Hero 1' }, { id: 2, name: 'Hero 2' }];\r\n\r\n    service.getHeroes().subscribe(heroes => {\r\n      expect(heroes.length).toBe(2);\r\n      expect(heroes).toEqual(dummyHeroes);\r\n    });\r\n\r\n    const req = httpMock.expectOne('http://localhost:3000/heroes');\r\n    expect(req.request.method).toBe('GET');\r\n    req.flush(dummyHeroes);\r\n  });\r\n\r\n  it('should update hero via PUT', () => {\r\n    const updatedHero = { id: 1, name: 'Updated Hero' };\r\n\r\n    service.updateHero(updatedHero).subscribe(response => {\r\n      expect(response).toBeTruthy();\r\n    });\r\n\r\n    const req = httpMock.expectOne('http://localhost:3000/heroes');\r\n    expect(req.request.method).toBe('PUT');\r\n    req.flush(updatedHero);\r\n  });\r\n});\r\n"],"mappings":"AAAA,SAASA,uBAAuB,EAAEC,qBAAqB,QAAQ,8BAA8B;AAC7F,SAASC,OAAO,QAAQ,uBAAuB;AAC/C,SAASC,iBAAiB,QAAQ,oBAAoB;AAEtDC,QAAQ,CAAC,mBAAmB,EAAE,MAAK;EACjC,IAAIC,OAA0B;EAC9B,IAAIC,QAA+B;EAEnCC,UAAU,CAAC,MAAK;IACdL,OAAO,CAACM,sBAAsB,CAAC;MAC7BC,OAAO,EAAE,CAACT,uBAAuB,CAAC;MAClCU,SAAS,EAAE,CAACP,iBAAiB;KAC9B,CAAC;IACFE,OAAO,GAAGH,OAAO,CAACS,MAAM,CAACR,iBAAiB,CAAC;IAC3CG,QAAQ,GAAGJ,OAAO,CAACS,MAAM,CAACV,qBAAqB,CAAC;EAClD,CAAC,CAAC;EAEFW,SAAS,CAAC,MAAK;IACbN,QAAQ,CAACO,MAAM,EAAE;EACnB,CAAC,CAAC;EAEFC,EAAE,CAAC,mBAAmB,EAAE,MAAK;IAC3BC,MAAM,CAACV,OAAO,CAAC,CAACW,UAAU,EAAE;EAC9B,CAAC,CAAC;EAEFF,EAAE,CAAC,6CAA6C,EAAE,MAAK;IACrD,MAAMG,WAAW,GAAG,CAAC;MAAEC,EAAE,EAAE,CAAC;MAAEC,IAAI,EAAE;IAAQ,CAAE,EAAE;MAAED,EAAE,EAAE,CAAC;MAAEC,IAAI,EAAE;IAAQ,CAAE,CAAC;IAE1Ed,OAAO,CAACe,SAAS,EAAE,CAACC,SAAS,CAACC,MAAM,IAAG;MACrCP,MAAM,CAACO,MAAM,CAACC,MAAM,CAAC,CAACC,IAAI,CAAC,CAAC,CAAC;MAC7BT,MAAM,CAACO,MAAM,CAAC,CAACG,OAAO,CAACR,WAAW,CAAC;IACrC,CAAC,CAAC;IAEF,MAAMS,GAAG,GAAGpB,QAAQ,CAACqB,SAAS,CAAC,8BAA8B,CAAC;IAC9DZ,MAAM,CAACW,GAAG,CAACE,OAAO,CAACC,MAAM,CAAC,CAACL,IAAI,CAAC,KAAK,CAAC;IACtCE,GAAG,CAACI,KAAK,CAACb,WAAW,CAAC;EACxB,CAAC,CAAC;EAEFH,EAAE,CAAC,4BAA4B,EAAE,MAAK;IACpC,MAAMiB,WAAW,GAAG;MAAEb,EAAE,EAAE,CAAC;MAAEC,IAAI,EAAE;IAAc,CAAE;IAEnDd,OAAO,CAAC2B,UAAU,CAACD,WAAW,CAAC,CAACV,SAAS,CAACY,QAAQ,IAAG;MACnDlB,MAAM,CAACkB,QAAQ,CAAC,CAACjB,UAAU,EAAE;IAC/B,CAAC,CAAC;IAEF,MAAMU,GAAG,GAAGpB,QAAQ,CAACqB,SAAS,CAAC,8BAA8B,CAAC;IAC9DZ,MAAM,CAACW,GAAG,CAACE,OAAO,CAACC,MAAM,CAAC,CAACL,IAAI,CAAC,KAAK,CAAC;IACtCE,GAAG,CAACI,KAAK,CAACC,WAAW,CAAC;EACxB,CAAC,CAAC;AACJ,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}