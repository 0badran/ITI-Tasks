{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { of } from 'rxjs';\nimport { catchError, tap } from 'rxjs/operators';\nimport { MessageService } from '../message/message.service';\nconst httpOptions = {\n  headers: new HttpHeaders({\n    'Content-Type': 'application/json'\n  })\n};\nlet HeroService = class HeroService {\n  constructor(http, messageService) {\n    this.http = http;\n    this.messageService = messageService;\n    this.heroesUrl = 'http://localhost:3000/heroes';\n  }\n  /** GET heroes from the server */\n  getHeroes() {\n    return this.http.get(this.heroesUrl).pipe(tap(() => this.log(`fetched heroes`)), catchError(this.handleError('getHeroes', [])));\n  }\n  /** GET hero by id. Will 404 if id not found */\n  getHero(id) {\n    const url = `${this.heroesUrl}/${id}`;\n    return this.http.get(url).pipe(tap(_ => this.log(`fetched hero id=${id}`)), catchError(this.handleError(`getHero id=${id}`)));\n  }\n  /* GET heroes whose name contains search term */\n  searchHeroes(term) {\n    if (!term.trim()) {\n      // if not search term, return empty hero array.\n      return of([]);\n    }\n    return this.http.get(`http://localhost:3000/heroes/?name=${term}`).pipe(tap(_ => this.log(`found heroes matching \"${term}\"`)), catchError(this.handleError('searchHeroes', [])));\n  }\n  //////// Save methods //////////\n  /** POST: add a new hero to the server */\n  addHero(hero) {\n    return this.http.post(this.heroesUrl, hero, httpOptions).pipe(tap(hero => this.log(`added hero w/ id=${hero.id}`)), catchError(this.handleError('addHero')));\n  }\n  /** DELETE: delete the hero from the server */\n  deleteHero(hero) {\n    const id = typeof hero === 'number' ? hero : hero.id;\n    const url = `${this.heroesUrl}/${id}`;\n    return this.http.delete(url, httpOptions).pipe(tap(_ => this.log(`deleted hero id=${id}`)), catchError(this.handleError('deleteHero')));\n  }\n  /** PUT: update the hero on the server */\n  updateHero(hero) {\n    return this.http.patch(this.heroesUrl, hero, httpOptions).pipe(tap(_ => this.log(`updated hero id=${hero.id}`)), catchError(this.handleError('updateHero')));\n  }\n  /**\n   * Handle Http operation that failed.\n   * Let the app continue.\n   * @param operation - name of the operation that failed\n   * @param result - optional value to return as the observable result\n   */\n  handleError(operation = 'operation', result) {\n    return error => {\n      // TODO: send the error to remote logging infrastructure\n      console.error(error); // log to console instead\n      // TODO: better job of transforming error for user consumption\n      this.log(`${operation} failed: ${error.message}`);\n      // Let the app keep running by returning an empty result.\n      return of(result);\n    };\n  }\n  /** Log a HeroService message with the MessageService */\n  log(message) {\n    this.messageService.add('HeroService: ' + message);\n  }\n  static #_ = this.ctorParameters = () => [{\n    type: HttpClient\n  }, {\n    type: MessageService\n  }];\n};\nHeroService = __decorate([Injectable({\n  providedIn: 'root'\n})], HeroService);\nexport { HeroService };","map":{"version":3,"names":["Injectable","HttpClient","HttpHeaders","of","catchError","tap","MessageService","httpOptions","headers","HeroService","constructor","http","messageService","heroesUrl","getHeroes","get","pipe","log","handleError","getHero","id","url","_","searchHeroes","term","trim","addHero","hero","post","deleteHero","delete","updateHero","patch","operation","result","error","console","message","add","__decorate","providedIn"],"sources":["/home/master-x/ITI-workspace/jsTesting/day2/src/app/services/hero service/hero.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\n\r\nimport { Observable, of } from 'rxjs';\r\nimport { catchError, map, tap } from 'rxjs/operators';\r\n\r\nimport { Hero } from '../../hero';\r\nimport { MessageService } from '../message/message.service';\r\n\r\nconst httpOptions = {\r\n  headers: new HttpHeaders({ 'Content-Type': 'application/json' })\r\n};\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class HeroService {\r\n\r\n  private heroesUrl = 'http://localhost:3000/heroes'; \r\n\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    private messageService: MessageService) { }\r\n\r\n  /** GET heroes from the server */\r\n  getHeroes (): Observable<Hero[]> {\r\n    return this.http.get<Hero[]>(this.heroesUrl)\r\n      .pipe(\r\n        tap(() => this.log(`fetched heroes`)),\r\n        catchError(this.handleError('getHeroes', []))\r\n      );\r\n  }\r\n\r\n\r\n  /** GET hero by id. Will 404 if id not found */\r\n  getHero(id: number): Observable<Hero> {\r\n    const url = `${this.heroesUrl}/${id}`;\r\n    return this.http.get<Hero>(url).pipe(\r\n      tap(_ => this.log(`fetched hero id=${id}`)),\r\n      catchError(this.handleError<Hero>(`getHero id=${id}`))\r\n    );\r\n  }\r\n\r\n  /* GET heroes whose name contains search term */\r\n  searchHeroes(term: string): Observable<Hero[]> {\r\n    if (!term.trim()) {\r\n      // if not search term, return empty hero array.\r\n      return of([]);\r\n    }\r\n    return this.http.get<Hero[]>(`http://localhost:3000/heroes/?name=${term}`).pipe(\r\n      tap(_ => this.log(`found heroes matching \"${term}\"`)),\r\n      catchError(this.handleError<Hero[]>('searchHeroes', []))\r\n    );\r\n  }\r\n\r\n  //////// Save methods //////////\r\n\r\n  /** POST: add a new hero to the server */\r\n  addHero (hero: Hero): Observable<Hero> {\r\n    return this.http.post<Hero>(this.heroesUrl, hero, httpOptions).pipe(\r\n      tap((hero: Hero) => this.log(`added hero w/ id=${hero.id}`)),\r\n      catchError(this.handleError<Hero>('addHero'))\r\n    );\r\n  }\r\n\r\n  /** DELETE: delete the hero from the server */\r\n  deleteHero (hero: Hero | number): Observable<Hero> {\r\n    const id = typeof hero === 'number' ? hero : hero.id;\r\n    const url = `${this.heroesUrl}/${id}`;\r\n\r\n    return this.http.delete<Hero>(url, httpOptions).pipe(\r\n      tap(_ => this.log(`deleted hero id=${id}`)),\r\n      catchError(this.handleError<Hero>('deleteHero'))\r\n    );\r\n  }\r\n\r\n  /** PUT: update the hero on the server */\r\n  updateHero (hero: Hero): Observable<any> {\r\n    return this.http.patch(this.heroesUrl, hero, httpOptions).pipe(\r\n      tap(_ => this.log(`updated hero id=${hero.id}`)),\r\n      catchError(this.handleError<any>('updateHero'))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Handle Http operation that failed.\r\n   * Let the app continue.\r\n   * @param operation - name of the operation that failed\r\n   * @param result - optional value to return as the observable result\r\n   */\r\n  private handleError<T> (operation = 'operation', result?: T) {\r\n    return (error: any): Observable<T> => {\r\n\r\n      // TODO: send the error to remote logging infrastructure\r\n      console.error(error); // log to console instead\r\n\r\n      // TODO: better job of transforming error for user consumption\r\n      this.log(`${operation} failed: ${error.message}`);\r\n\r\n      // Let the app keep running by returning an empty result.\r\n      return of(result as T);\r\n    };\r\n  }\r\n\r\n  /** Log a HeroService message with the MessageService */\r\n  private log(message: string) {\r\n    this.messageService.add('HeroService: ' + message);\r\n  }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}